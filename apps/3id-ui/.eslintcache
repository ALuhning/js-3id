[{"/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/index.tsx":"1","/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/reportWebVitals.ts":"2","/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/Components/App/App.tsx":"3","/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/Components/Modal/Modal.tsx":"4","/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/Components/Content/Content.tsx":"5","/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/Components/Header/Header.tsx":"6","/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/utils/index.ts":"7"},{"size":3145,"mtime":1632503235264,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1632340701880,"results":"10","hashOfConfig":"9"},{"size":482,"mtime":1632503235262,"results":"11","hashOfConfig":"9"},{"size":2670,"mtime":1632503235263,"results":"12","hashOfConfig":"9"},{"size":234,"mtime":1632410833636,"results":"13","hashOfConfig":"9"},{"size":1767,"mtime":1632512900500,"results":"14","hashOfConfig":"9"},{"size":635,"mtime":1632512714164,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"eqjzh6",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/index.tsx",["35"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './Components/App/App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { ThreeIDService } from '@3id/service'\nimport { DisplayConnectClientRPC } from '@3id/connect-display'\nimport { UIProvider, UIProviderHandlers } from '@3id/ui-provider'\n\nconst render = async (params: object, type: string, buttons: object) => {\n  const request = Object.assign(params, { type })\n  console.log(params)\n  ReactDOM.render(\n    <React.StrictMode>\n      <App request={request} buttons={buttons} />\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nconst connectService = new ThreeIDService()\nconst iframeDisplay = new DisplayConnectClientRPC(window.parent)\n\nconst modalView = async (params: object, type: string) => {\n  await iframeDisplay.display(undefined, '100%', '100%')\n  let acceptNode = <div className=\"btn\">Accept</div>\n  let declineNode = <div className=\"btn\">Decline</div>\n\n  const accepted = new Promise((resolve) => {\n    acceptNode = (\n      <div\n        className=\"btn\"\n        onClick={() => {\n          resolve(true)\n        }}>\n        Accept\n      </div>\n    )\n    if (declineNode) {\n      declineNode = (\n        <div\n          className=\"btn\"\n          onClick={() => {\n            resolve(true)\n          }}>\n          Decline\n        </div>\n      )\n    }\n  })\n  await render(params, type, { acceptNode, declineNode })\n  return {\n    accepted,\n    acceptNode,\n    declineNode,\n  }\n}\n\nconst UIMethods: UIProviderHandlers = {\n  //@ts-ignore\n  prompt_migration: async (ctx = {}, params: object) => {\n    const modal = await modalView(params, 'migration')\n    const migration = await modal.accepted\n    console.log(migration)\n    return { migration }\n  },\n  //@ts-ignore\n  prompt_migration_skip: async (ctx = {}, params: object) => {\n    const modal = await modalView(params, 'migration_skip')\n    const skip = await modal.accepted\n    return { skip }\n  },\n  //@ts-ignore\n  prompt_migration_fail: async (ctx = {}, params: object) => {\n    const modal = await modalView(params, 'migration_fail')\n    const createNew = await modal.accepted\n    return { createNew }\n  },\n  //@ts-ignore\n  prompt_account: async (ctx = {}, params: object) => {\n    const modal = await modalView(params, 'account')\n    const createNew = !(await modal.accepted)\n    return { createNew }\n  },\n  //@ts-ignore\n  prompt_authenticate: async (ctx = {}, params: object) => {\n    const modal = await modalView(params, 'authenticate')\n    const allow = await modal.accepted\n    console.log(allow)\n    return { allow }\n  },\n  //@ts-ignore\n  inform_error: async (ctx = {}, params: any) => {\n    if (params?.data) {\n      console.log(params?.data.toString())\n    }\n  },\n}\n\n//Create a 3ID Connect UI Provider\nconst provider = new UIProvider(UIMethods)\n\n// Closure to pass cancel state to IDW iframe service\nlet closecallback: any\n\n// @ts-ignore\nwindow.hideIframe = () => {\n  iframeDisplay.hide()\n  if (closecallback) closecallback()\n}\n\nconst closing = (cb: any) => {\n  closecallback = cb\n}\n\n//@ts-ignore\nconnectService.start(provider, closing)\n\nreportWebVitals()\n","/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/reportWebVitals.ts",["36"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",["37","38"],"/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/Components/App/App.tsx",[],"/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/Components/Modal/Modal.tsx",[],"/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/Components/Content/Content.tsx",[],"/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/Components/Header/Header.tsx",["39","40"],"import React from 'react'\nimport Avatar from 'boring-avatars'\nimport KeyDidResolver from 'key-did-resolver'\nimport ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'\nimport { DID } from 'dids'\n\nimport { createIdx, createCeramic } from '../../utils'\nimport './Header.scss'\nimport { ResolverRegistry } from 'did-resolver'\n\ntype HeaderProps = {\n  did?: string\n}\nconst Header = ({ did }: HeaderProps) => {\n  let idx: any\n  const authenticate = async () => {\n    const ceramic = await createCeramic()\n    const keyDidResolver = KeyDidResolver.getResolver()\n    const threeIdResolver = ThreeIdResolver.getResolver(ceramic)\n\n    const resolverRegistry: ResolverRegistry = {\n      ...threeIdResolver,\n      ...keyDidResolver,\n    }\n    const did = new DID({\n      resolver: resolverRegistry,\n    })\n    await did.authenticate()\n    await ceramic.setDID(did)\n    const idx = createIdx(ceramic)\n    return idx\n  }\n\n  const setIDX = async () => {\n    idx = await authenticate()\n  }\n\n  React.useEffect(() => {\n    if (did) {\n      setIDX()\n      if (idx) {\n        idx.get('basicProfile')\n      }\n    }\n  }, [did])\n  return (\n    <div className=\"head\">\n      <div className=\"logo-container\">\n        <a\n          href=\"https://ceramic.network\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          className=\"logo col-12\">\n          SelfId Connect\n        </a>\n        <span> SelfID Connect </span>\n      </div>\n      <div className=\"image-container\">\n        <div className=\"avatar\">\n          <Avatar\n            size={65}\n            name={did ?? 'self.id-connect'}\n            variant=\"marble\"\n            colors={['#FF0092', '#FFCA1B', '#B6FF00', '#228DFF', '#BA01FF']}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","/Users/sterahi/Documents/3id-connect/apps/3id-ui/src/utils/index.ts",["41"],"import * as hexToRgb from 'hex-to-rgb'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport type { CeramicApi } from '@ceramicnetwork/common'\nimport { IDX } from '@ceramicstudio/idx'\n\nexport const hexToRGBA = (hex: string, opacity?: number | null): string =>\n  `rgba(${hexToRgb(hex) as string}, ${(opacity || 30) / 100})`\n\nexport async function createCeramic(): Promise<CeramicApi> {\n  // TODO: move to ENV var\n  const ceramic = new Ceramic('https://ceramic-clay.3boxlabs.com')\n  return Promise.resolve(ceramic as CeramicApi)\n}\n\nexport const createIdx = (ceramic: CeramicApi) => {\n  const idx = new IDX({ ceramic })\n  return idx\n}\n",{"ruleId":"42","severity":1,"message":"43","line":9,"column":22,"nodeType":"44","messageId":"45","endLine":9,"endColumn":40},{"ruleId":"42","severity":1,"message":"46","line":1,"column":10,"nodeType":"44","messageId":"45","endLine":1,"endColumn":23},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"42","severity":1,"message":"51","line":9,"column":10,"nodeType":"44","messageId":"45","endLine":9,"endColumn":26},{"ruleId":"52","severity":1,"message":"53","line":45,"column":6,"nodeType":"54","endLine":45,"endColumn":11,"suggestions":"55"},{"ruleId":"42","severity":1,"message":"56","line":3,"column":15,"nodeType":"44","messageId":"45","endLine":3,"endColumn":25},"@typescript-eslint/no-unused-vars","'UIProviderHandlers' is defined but never used.","Identifier","unusedVar","'ReportHandler' is defined but never used.","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"'ResolverRegistry' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'idx' and 'setIDX'. Either include them or remove the dependency array.","ArrayExpression",["59"],"'CeramicApi' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [did, idx, setIDX]",{"range":"62","text":"63"},[1101,1106],"[did, idx, setIDX]"]